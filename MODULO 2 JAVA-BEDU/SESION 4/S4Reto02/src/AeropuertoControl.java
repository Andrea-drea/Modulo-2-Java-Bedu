import java.util.Random;
import java.util.concurrent.*;

public class AeropuertoControl {

    //// Generador de n√∫meros aleatorios para simular fallos en los servicios
    private static final Random random = new Random();

    //Verificar disponibilidad de la pista (con fallo aleatorio)
    public static CompletableFuture<Boolean> verificarPista() {
        return CompletableFuture.supplyAsync(() -> {
            simularLatencia(2); //Simula espera de 2 segundos
            boolean disponible = random.nextInt(100) < 80; // 80% de probabilidad de √©xito
            System.out.println("üõ£Ô∏è Pista disponible: " + disponible);
            return disponible;
        });
    }

    //Verifica que el clima sea favorable (85% de probabilidad)
    public static CompletableFuture<Boolean> verificarClima() {
        return CompletableFuture.supplyAsync(() -> {
            simularLatencia(3);//Simula espera de 3 segundos
            boolean favorable = random.nextInt(100) < 85; // 85% de probabilidad
            System.out.println("üå¶Ô∏è Clima favorable: " + favorable);
            return favorable;
        });
    }

    //Verifica que el tr√°fico este despejado (90% de probabilidad)
    public static CompletableFuture<Boolean> verificarTraficoAereo() {
        return CompletableFuture.supplyAsync(() -> {
            simularLatencia(2); //Simula espera de 2 seg
            boolean despejado = random.nextInt(100) < 90; // 90% de probabilidad
            System.out.println("üö¶ Tr√°fico a√©reo despejado: " + despejado);
            return despejado;
        });
    }

    //Verifica que haya personal en tierra disponible
    public static CompletableFuture<Boolean> verificarPersonalTierra() {
        return CompletableFuture.supplyAsync(() -> {
            simularLatencia(3);
            boolean disponible = random.nextInt(100) < 95; // 95% de probabilidad
            System.out.println("üë∑‚Äç‚ôÇÔ∏è Personal disponible: " + disponible);
            return disponible;
        });
    }

    // Simula latencia en los servicios
    public static void simularLatencia(int segundos) {
        try {
            TimeUnit.SECONDS.sleep(segundos); // Pausa el hilo durante X segundos
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt(); // Restaura el estado de interrupci√≥n
        }
    }

    public static void main(String[] args) {

        System.out.println("üõ´ Verificando condiciones para aterrizaje...\n");

        //Ejecuta todas las verificaciones de forma asincronica
        CompletableFuture<Boolean> pistaFuture = verificarPista();
        CompletableFuture<Boolean> climaFuture = verificarClima();
        CompletableFuture<Boolean> traficoFuture = verificarTraficoAereo();
        CompletableFuture<Boolean> personalFuture = verificarPersonalTierra();

        //Espera a que todas las tareas est√©n completadas
        CompletableFuture<Void> allChecks = CompletableFuture.allOf(pistaFuture, climaFuture, traficoFuture, personalFuture);

        //Cuando todas est√©n listas, eval√∫a los resultados
        allChecks.thenApplyAsync(v -> {
                    try {
                        //Si hay un error, se lanza una excepcion para que la capture exceptionally
                        boolean condicionesOk = pistaFuture.get() && climaFuture.get() && traficoFuture.get() && personalFuture.get();
                        return condicionesOk;
                    } catch (Exception e) {
                        throw new RuntimeException("Error al obtener resultados", e);
                    }
                })
                //        // Seg√∫n el resultado combinado, se muestra si el aterrizaje es autorizado o no
                .thenAccept(condicionesOk -> {
                    if (condicionesOk) {
                        System.out.println("\nüõ¨ Aterrizaje autorizado: todas las condiciones √≥ptimas.");
                    } else {
                        System.out.println("\nüö´ Aterrizaje denegado: condiciones no √≥ptimas.");
                    }
                })
                // Captura cualquier error que ocurra en la cadena de ejecuci√≥n
                .exceptionally(ex -> {
                    System.out.println("\n‚ùå Error en la verificaci√≥n: " + ex.getMessage());
                    return null;
                });

        //Espera 10 segundos para que las tareas asincr√≥nicas terminen antes de cerrar el programa
        try {
            Thread.sleep(10000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}